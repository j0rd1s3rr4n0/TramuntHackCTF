// Function to generate a random string for IP address
function generateRandomIP() {
    const firstOctet = Math.floor(Math.random() * 255) + 1;  // First octet between 1 and 255
    const secondOctet = Math.floor(Math.random() * 256);
    const thirdOctet = Math.floor(Math.random() * 256);
    const fourthOctet = Math.floor(Math.random() * 256);
    return `${firstOctet}.${secondOctet}.${thirdOctet}.${fourthOctet}`;
}

// Function to generate a random date within the last week
function generateRandomDate() {
    const now = new Date();
    const oneWeekAgo = new Date(now - (Math.random() * 7 * 24 * 60 * 60 * 1000)); // Random between now and 1 week ago
    return oneWeekAgo.toISOString().slice(0, 19).replace('T', ' '); // Format: YYYY-MM-DD HH:MM:SS
}

// Function to generate a random location
function generateRandomLocation() {
    const locations = ['New York, USA', 'Los Angeles, USA', 'London, UK', 'Berlin, Germany', 'Paris, France', 'Tokyo, Japan', 'Sydney, Australia'];
    return locations[Math.floor(Math.random() * locations.length)];
}

// Function to generate a random device
function generateRandomDevice() {
    const devices = ['Windows 10', 'MacBook Pro', 'iPhone 13', 'Samsung Galaxy S21', 'Google Pixel', 'Linux'];
    return devices[Math.floor(Math.random() * devices.length)];
}

// Function to generate a random authentication method
function generateRandomAuthMethod() {
    const methods = ['Password', 'Two-Factor Authentication', 'Fingerprint', 'Face Recognition', 'SMS OTP'];
    return methods[Math.floor(Math.random() * methods.length)];
}

// Function to fetch password from API
async function fetchPassword() {
    try {
        const response = await fetch('https://api.genratr.com/?length=16&uppercase&lowercase&numbers');
        const data = await response.json();
        return data.password;  // Return the password generated by the API
    } catch (error) {
        console.error("Error fetching password:", error);
        return "ErrorGeneratingPassword";  // Fallback password in case of error
    }
}

// Function to fetch username from API
async function fetchUsername() {
    try {
        const response = await fetch('https://usernameapiv1.vercel.app/api/random-usernames');
        const data = await response.json();
        return data.usernames[0];  // Return the first username from the array
    } catch (error) {
        console.error("Error fetching username:", error);
        return "ErrorGeneratingUsername";  // Fallback username in case of error
    }
}

// Function to fetch information from HudsonRock API
async function fetchHudsonRockInfo(email) {
    try {
        const response = await fetch(`https://cavalier.hudsonrock.com/api/json/v2/osint-tools/search-by-email?email=${email}`);
        const data = await response.json();
        return data;  // Return the API response
    } catch (error) {
        console.error("Error fetching HudsonRock data:", error);
        return null;  // Return null in case of error
    }
}

// Function to handle leak search
async function handleSearch(event) {
    event.preventDefault();
    
    const email = document.getElementById('emailInput').value;
    const resultMessage = document.getElementById('resultMessage');
    const leaksTableBody = document.getElementById('leaksTable').getElementsByTagName('tbody')[0];

    // Clear the table before showing results
    leaksTableBody.innerHTML = '';

    // Simulate a 70% chance of finding leaks
    if (Math.random() < 0.3) {
        resultMessage.textContent = 'Not found';
    } else {
        resultMessage.textContent = 'Leaked account(s) found:';
        
        // Fetch HudsonRock data
        const hudsonRockData = await fetchHudsonRockInfo(email);
        
        // Generate between 1 and 3 leaks per search
        const numberOfLeaks = Math.floor(Math.random() * 3) + 1;
        
        for (let i = 0; i < numberOfLeaks; i++) {
            const username = Math.random() < 0.5 ? await fetchUsername() : email;
            const password = await fetchPassword();
            const ip = generateRandomIP();
            const datetime = generateRandomDate();
            const location = generateRandomLocation();
            const device = generateRandomDevice();
            const authMethod = generateRandomAuthMethod();

            // Create a row in the table
            const row = leaksTableBody.insertRow();
            row.innerHTML = `
                <td>${username}</td>
                <td>${password}</td>
                <td>${ip}</td>
                <td>${datetime}</td>
                <td>${location}</td>
                <td>${device}</td>
                <td>${authMethod}</td>
            `;

            // If HudsonRock API found relevant data
            if (hudsonRockData && hudsonRockData.stealers.length > 0) {
                const stealData = hudsonRockData.stealers[0]; // Get the first steal entry (can be more, we take the first one)

                // Add the infection information to the table
                const infectionRow = leaksTableBody.insertRow();
                infectionRow.innerHTML = `
                    <td colspan="7">
                        <strong>Infected Computer:</strong> ${stealData.computer_name} (${stealData.operating_system})<br>
                        <strong>Date Compromised:</strong> ${new Date(stealData.date_compromised).toLocaleString()}<br>
                        <strong>IP Address:</strong> ${stealData.ip}<br>
                        <strong>Malware Path:</strong> ${stealData.malware_path}<br>
                        <strong>Antivirus Detected:</strong> ${stealData.antiviruses.join(', ')}<br>
                        <strong>Top Passwords:</strong> ${stealData.top_passwords.join(', ')}<br>
                        <strong>Top Logins:</strong> ${stealData.top_logins.join(', ')}
                    </td>
                `;
            } else {
                // If no data was found for info-stealer
                const noInfectionRow = leaksTableBody.insertRow();
                noInfectionRow.innerHTML = `
                    <td colspan="7">
                        <strong>No info-stealer associated with this email.</strong>
                    </td>
                `;
            }
        }
    }
}

// Add the event listener to the form
document.getElementById('searchForm').addEventListener('submit', handleSearch);
